#!/bin/bash
# vim:set et sw=4 ts=4 tw=100:

set -e

VERSION="0.1"

### defaults

# config file options
EMAIL=$(id -un)
HOSTNAME=$(hostname -f)

# system settings
LOGNAME=${LOGNAME:-$(id -un)}
FLATPAK="${FLATPAK:-}flatpak"
SYSCONFDIR=${SYSCONFDIR:-/etc}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}

# command line options
USER=0
SYSTEM=0
INSTALLATION=
STDOUT=0

# global variables
TMPFILE=

### functions

version() {
    echo "flaticron $VERSION"
    echo "Copyright (c) 2023 Rainer MÃ¼ller <raimue@codingfarm.de>"
}

usage() {
    version
    echo ""
    echo "Usage: flaticron"
    echo "--config <file>        Read this additional config file"
    echo "--email <addr...>      List of addresses to send the report to"
    echo "--stdout               Print the report to standard output instead of sending mail"
    echo "--user                 Show pending updates for user installation"
    echo "--system               Show pending updates for system installation"
    echo "--installation <name>  Show pending updates for a non-default system-wide installation"
    echo "--version              Print version information"
    echo "--help                 Print this help text"
}

tmpfile() {
    mktemp --tmpdir flaticron.XXXXXXXXXX
}

sendmail() {
    if [ $STDOUT -eq 1 ]; then
        cat
        return
    fi

    mailx -a "MIME-Version: 1.0" \
          -a "Content-type: text/plain; charset=UTF-8" \
          -a "Content-transfer-encoding: 8bit" \
          "$@"
}

cleanup() {
    if [ -n "$TMPFILE" ]; then
        rm -f "$TMPFILE"
    fi
}

### main

# Install trap handler for cleanup
trap cleanup EXIT INT TERM

# Add default config files
CONFIG_FILES=()
for f in "$SYSCONFDIR/flaticron/flaticron.conf" \
         "${XDG_CONFIG_HOME}/flaticron/flaticron.conf"; do
    if [ -e "$f" ]; then
        CONFIG_FILES+=( "$f" )
    fi
done

# Parse command-line arguments
while [ $# -gt 0 ]; do
    case "$1" in
    --config)
        shift
        CONFIG_FILES+=( "$1" )
        ;;
    --stdout)
        STDOUT=1
        ;;
    --user)
        USER=1
        ;;
    --system)
        SYSTEM=1
        ;;
    --installation)
        shift
        INSTALLATION=$1
        ;;
    --installation=*)
        INSTALLATION=${1#--installation=}
        ;;
    --version)
        version
        exit 0
        ;;
    --help)
        usage
        exit 0
        ;;
    *)
        usage >&2
        exit 1
        ;;
    esac
    shift
done

# Read config files
for f in "${CONFIG_FILES[@]}"; do
    # shellcheck source=flaticron.conf
    if ! source "$f"; then
        echo "Error: cannot load config file: $f" >&2
        exit 1
    fi
done

# Build flatpak arguments from selected options
if [ $USER -eq 1 ]; then
    ARGS+=( --user )
fi
if [ $SYSTEM -eq 1 ]; then
    ARGS+=( --system )
fi
if [ -n "$INSTALLATION" ]; then
    ARGS+=( --installation="$INSTALLATION" )
fi

# Create temporary file
TMPFILE=$(tmpfile)

# Update appstream metadata
declare -a cmd=(
    "$FLATPAK" "${ARGS[@]}"
    update --appstream
)
if ! "${cmd[@]}" >& "$TMPFILE"; then
    cat "$TMPFILE" >&2
    echo "Error: failed to update flatpak appstream metadata" >&2
    exit 1
fi

# Get pending flatpak updates
declare -a cmd=(
    "$FLATPAK" "${ARGS[@]}"
    remote-ls --updates --columns "application:f,branch:f,origin:f"
)
if ! "${cmd[@]}" >& "$TMPFILE"; then
    cat "$TMPFILE" >&2
    echo "Error: failed to get pending flatpak updates" >&2
    exit 1
fi
count=0
declare -a application branch origin
# shellcheck disable=SC2004
while IFS='|' read -r _application _branch _origin; do
    application[$count]=$_application
    branch[$count]=$_branch
    origin[$count]=$_origin
    count=$(( count + 1 ))
done < <(tr $'\t' '|' < "$TMPFILE")

# If no updates are pending, do not send mail
if [ $count -eq 0 ]; then
    if [ $STDOUT -eq 1 ]; then
        echo "Nothing to update."
    fi
    exit 0
fi

# Prepare and send report via mail
TIMESTAMP=$(date -R)
ARGSLIST=""
if [ $USER -eq 1 ]; then
    ARGSLIST="user"
fi
if [ $SYSTEM -eq 1 ]; then
    ARGSLIST+="${ARGSLIST:+/}system"
fi
if [ -n "$INSTALLATION" ]; then
    ARGSLIST+="${ARGSLIST:+/}$INSTALLATION"
fi
if [ -n "$ARGSLIST" ]; then
    ARGSLIST=" $ARGSLIST"
fi
sendmail -s "$count flatpak$ARGSLIST update(s) for $HOSTNAME" "$EMAIL" < <(
cat <<EOF
flaticron report [$TIMESTAMP]
========================================================================

flaticron has detected that some flatpaks need updating on:

  $HOSTNAME

The following flatpaks ${ARGSLIST:+in$ARGSLIST }are currently pending an update:

EOF

for ((i=0; i<count;i++)); do
    printf "  %-48s %-12s %s\n" \
        "${application[$i]}" \
        "${branch[$i]}" \
        "${origin[$i]}"
done

cat <<EOF

========================================================================

You can perform the update by issuing the command:

  $FLATPAK ${ARGS[@]:+${ARGS[@]} }update

as $LOGNAME on $HOSTNAME

-- 
flaticron
EOF
)
